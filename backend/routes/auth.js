const express = require("express");
const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const pool = require("../config/db");

const router = express.Router();

// Регистрация пользователя
router.post("/register", async (req, res) => {
  const { name, nickname, email, password } = req.body;

  try {
    // Проверка на существование пользователя
    const userCheck = await pool.query("SELECT * FROM polzovateli WHERE email = $1", [email]);
    if (userCheck.rows.length > 0) {
      return res.status(400).json({ message: "Email уже зарегистрирован" });
    }

    // Хеширование пароля
    const hashedPassword = await bcrypt.hash(password, 10);

    // Вставка пользователя в базу данных
    const result = await pool.query(
      "INSERT INTO polzovateli (name, nickname, email, password) VALUES ($1, $2, $3, $4) RETURNING *",
      [name, nickname, email, hashedPassword]
    );

    res.status(201).json({ message: "Пользователь зарегистрирован", user: result.rows[0] });
  } catch (error) {
    console.error("Ошибка при регистрации:", error.message);
    res.status(500).json({ error: "Ошибка сервера" });
  }
});

// Логин пользователя
router.post("/login", async (req, res) => {
  const { email, password } = req.body;

  try {
    // Проверка пользователя по email
    const user = await pool.query("SELECT * FROM polzovateli WHERE email = $1", [email]);
    if (user.rows.length === 0) {
      return res.status(400).json({ message: "Пользователь не найден" });
    }

    // Проверка пароля
    const isPasswordValid = await bcrypt.compare(password, user.rows[0].password);
    if (!isPasswordValid) {
      return res.status(401).json({ message: "Неверный пароль" });
    }

    // Создание JWT-токена
    const token = jwt.sign({ id: user.rows[0].id }, process.env.JWT_SECRET, { expiresIn: "1h" });

    res.json({ message: "Успешный вход", token });
  } catch (error) {
    console.error("Ошибка при входе:", error.message);
    res.status(500).json({ error: "Ошибка сервера" });
  }
});

module.exports = router;
